https://sqlbolt.com/

SQL, or Structured Query Language, is a language designed to allow both technical and non-technical users query, manipulate, and transform data from a relational database. And due to its simplicity, SQL databases provide safe and scalable storage for millions of websites and mobile applications.

** convention **
SQL doesn't require you to write the keywords(SELECT、FROM、WHERE ..) all capitalized, but as a convention, it helps people distinguish SQL keywords from column and tables names, and makes the query easier to read.


Lesson 1
SELECT column, another_column FROM which_table
<!-- 顯示 which_table 裡的 column 跟 another_column 欄位資料 -->

SELECT * FROM which_table
<!-- 顯示 which_table 裡的 *(所有) 欄位資料  -->


SQL Lesson 2: Queries with constraints
<!-- Id  Title Director  Year  Length_minutes
1 Toy Story John Lasseter 1995  81
2 A Bug's Life  John Lasseter 1998  95
3 Toy Story 2 John Lasseter 1999  93
4 Monsters, Inc.  Pete Docter 2001  92
5 Finding Nemo  Andrew Stanton  2003  107
6 The Incredibles Brad Bird 2004  116
7 Cars  John Lasseter 2006  117
8 Ratatouille Brad Bird 2007  115
9 WALL-E  Andrew Stanton  2008  104
10  Up  Pete Docter 2009  101
 -->
SELECT title, year FROM movies
WHERE year <= 2003;
<!-- 顯示名字、年份，條件是前五部發行的作品 -->
SELECT title, year FROM movies
WHERE year
BETWEEN 1995 AND 2003

SQL Lesson 3: Queries with constraints (case-insensitive case-sensitive)

SELECT * FROM movies
WHERE title LIKE "%WALL%"
<!-- Find all the WALL-* movies -->
<!-- Id  Title Director  Year  Length_minutes
9 WALL-E  Andrew Stanton  2008  104
87  WALL-G  Brenda Chapman  2042  97
 -->

SQL Lesson 4: Filtering and sorting Query results


DISTINCT keyword will blindly remove duplicate rows
ORDER provides a way to sort your results by a given column in ascending or descending order

commonly used with the ORDER BY clause are the LIMIT and OFFSET clauses
LIMIT will reduce the number of rows to return, and the optional
OFFSET will specify where to begin counting the number rows from.



Q：List all directors of Pixar movies (alphabetically), without duplicates
SELECT DISTINCT director FROM movies
ORDER BY director ASC;

Q：List the last four Pixar movies released (ordered from most recent to least)
SELECT * FROM movies
WHERE year >= 2010
ORDER BY year DESC;

SELECT * FROM movies
ORDER BY year DESC
LIMIT 4;

Q：List the first five Pixar movies sorted alphabetically
SELECT * FROM movies
ORDER BY title ASC
LIMIT 5;

Q：List the next five Pixar movies sorted alphabetically
SELECT * FROM movies
ORDER BY title ASC
LIMIT 5 OFFSET 5;



SQL Lesson 5 Review: Simple SELECT Queries

Q1：List all the Canadian cities and their populations
SELECT * FROM north_american_cities
WHERE Country = "Canada"


Q2：Order all the cities in the United States by their latitude from north to south
SELECT * FROM north_american_cities
WHERE Country = "United States"
ORDER BY Latitude DESC;

Q3：List the two largest cities in Mexico (by population)
SELECT * FROM north_american_cities
WHERE Country = "Mexico"
ORDER BY Population DESC
LIMIT 2

Q4：List the third and fourth largest cities (by population) in the United States and their population
SELECT * FROM north_american_cities
WHERE country LIKE "United States"
ORDER BY population DESC
LIMIT 2 OFFSET 2;


SQL Lesson 6: Multi-table queries with JOINs

The INNER JOIN is a process that matches rows from the first table and the second table which have the same key (as defined by the ON constraint) to create a result row with the combined columns from both tables.

INNER JOIN the result table only contains data that belongs in both of the tables.


Q1：Find the domestic and international sales for each movie
SELECT * FROM movies
INNER JOIN Boxoffice
      ON id == movie_id


Q2：Show the sales numbers for each movie that did better internationally rather than domestically
SELECT * FROM movies
INNER JOIN Boxoffice
      ON id == movie_id
WHERE International_sales > Domestic_sales

Q3：List all the movies by their ratings in descending order
SELECT * FROM movies
INNER JOIN Boxoffice
      ON id == movie_id
ORDER BY Rating DESC;


SQL Lesson 7: OUTER JOINs

INNER JOIN the result table only contains data that belongs in both of the tables.
LEFT JOIN simply includes rows from A regardless of whether a matching row is found in B.
RIGHT JOIN is the same, but reversed, keeping rows in B regardless of whether a match is found in A.
FULL JOIN simply means that rows from both tables are kept, regardless of whether a matching row exists in the other table.


Q1：Find the list of all buildings that have employees
SELECT DISTINCT building FROM employees;

Q2：Find the list of all buildings and their capacity
SELECT * FROM buildings;

Q3：List all buildings and the distinct employee roles in each building (including empty buildings)
SELECT DISTINCT building_name, role FROM Buildings
LEFT JOIN Employees
     ON Building_name = Building


SQL Lesson 8: A short note on NULLs


Q1：Find the name and role of all employees who have not been assigned to a building
SELECT name, role FROM employees
WHERE building IS NULL;


Q2：Find the names of the buildings that hold no employees

It's always good to reduce the possibility of NULL values in databases because they require special attention when constructing queries, constraints (certain functions behave differently with null values) and when processing the results.

我的答案
SELECT building_name FROM Buildings
LEFT JOIN employees
     ON Building_name = Building
     WHERE Years_employed IS NULL

課本的答案
SELECT DISTINCT building_name FROM buildings
LEFT JOIN employees
    ON building_name = building
    WHERE role IS NULL;


SQL Lesson 9: Queries with expressions

you can also use expressions to write more complex logic on column values in a query. These expressions can use mathematical and string functions along with basic arithmetic to transform values when the query is executed, as shown in this physics example.

SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

we recommend that when expressions are used in the SELECT part of the query, that they are also given a descriptive alias using the AS keyword.

Q1：List all movies and their combined sales in millions of dollars
我的答案
SELECT (domestic_sales + international_sales) / 1000000 AS all_sales_in_millions
FROM boxoffice

(沒明確指出要顯示 movies title，可是答案卻一定要顯示)
課本答案
SELECT title, (domestic_sales + international_sales) / 1000000 AS gross_sales_millions
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;

Q2：List all movies and their ratings in percent
我的答案
SELECT (Rating * 10) AS present
FROM boxoffice

(沒明確指出要顯示 movies title，可是答案卻一定要顯示)
課本答案
SELECT title, rating * 10 AS rating_percent
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id;


Q3：List all movies that were released on even number years
SELECT 的欄位都可以改變他的名稱
(我的答案。沒注意到可以直接從 movies 下手就行。)
SELECT title AS t, year AS even_number_year
FROM movies
  JOIN boxoffice
    ON movies.id = boxoffice.movie_id
      WHERE year % 2 = 0;

(課本答案)
SELECT title, year
FROM movies
WHERE year % 2 = 0;


SQL Lesson 10: Queries with aggregates (Pt. 1)

Q1：Find the longest time that an employee has been at the studio
SELECT MAX(years_employed) FROM employees;

Q2：For each role, find the average number of years employed by employees in that role
SELECT DISTINCT role, AVG(years_employed) FROM employees
GROUP BY role ;
(DISTINCT 是多餘的， GROUP BY 就會濾掉重複的)

Q3：Find the total number of employee years worked in each building
SELECT building, SUM(years_employed)
FROM employees
GROUP BY building;

SQL Lesson 11: Queries with aggregates (Pt. 2)

The HAVING clause constraints are written the same way as the WHERE clause constraints, and are applied to the grouped row
如果用到 GROUP BY 的話，WHERE 就無法使用，可以用 HAVING 來取代

Q1：Find the number of Artists in the studio (without a HAVING clause)
我的答案
SELECT COUNT(role) FROM employees
WHERE role = "Artist";

課本答案
SELECT role, COUNT(*) as Number_of_artists
FROM employees
WHERE role = "Artist";


Q2：Find the number of Employees of each role in the studio
SELECT role, COUNT(*)
FROM employees
GROUP BY role


Q3：Find the total number of years employed by all Engineers
我的答案 (沒用到 HAVING 語法，本課的重點)
SELECT SUM(years_employed)
FROM employees
WHERE role = 'Engineer';

課本答案
SELECT role, SUM(years_employed)
FROM employees
GROUP BY role
HAVING role = "Engineer";
































